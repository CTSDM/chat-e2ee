generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions", "relationJoins"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgcrypto]
}

model User {
  id                         Int                 @id @default(autoincrement())
  privateUsername            String              @unique
  publicUsername             String              @unique
  publicUsernameOriginalCase String              @unique
  password                   String
  publicKey                  Bytes
  privateKeyEncrypted        Bytes
  salt                       Bytes
  iv                         Bytes
  backups                    Backup[]
  groupKeySymm               GroupKeySymm[]
  tokens                     Token[]
  receivedMessages           Message[]           @relation("ReceivedMessages")
  groupKeySymmSetup          GroupKeySymmSetup[]

  @@map("users")
}

model Backup {
  id             Int    @id @default(autoincrement())
  // the content will be stored as encrypted data, the raw string is a JSON with stringify
  content        Bytes
  publicUsername String @unique
  User           User   @relation(fields: [publicUsername], references: [publicUsername], onDelete: Cascade)

  @@map("backups")
}

model GroupKeySymm {
  id             Int    @id @default(autoincrement())
  groupID        String
  key            Bytes
  iv             Bytes
  publicUsername String
  User           User   @relation(fields: [publicUsername], references: [publicUsername], onDelete: Cascade)

  @@unique([groupID, publicUsername])
  @@map("group_key_symm")
}

model GroupKeySymmSetup {
  id             Int    @id @default(autoincrement())
  groupID        String
  key            Bytes
  iv             Bytes
  publicUsername String
  encryptedBy    String
  User           User   @relation(fields: [publicUsername], references: [publicUsername], onDelete: Cascade)
}

model Message {
  id                     Int    @id @default(autoincrement())
  flagByte               Int
  content                Bytes
  senderPublicUsername   String
  receiverPublicUsername String
  ReceivedBy             User   @relation("ReceivedMessages", fields: [senderPublicUsername], references: [publicUsername], onDelete: Cascade)

  @@map("messages")
}

model Token {
  id      String @id
  user_id Int
  User    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("tokens")
}
