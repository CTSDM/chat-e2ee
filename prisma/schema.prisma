generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions", "relationJoins"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgcrypto]
}

model User {
  id                  Int             @id @default(autoincrement())
  privateUsername     String          @unique
  publicUsername      String          @unique
  password            String
  publicKey           Bytes
  privateKeyEncrypted Bytes
  salt                Bytes
  iv                  Bytes
  SentMessages        DirectMessage[] @relation("SentMessages")
  ReceivedMessages    DirectMessage[] @relation("ReceivedMessages")
  Token               Token[]
  CreatedGroups       Group[]
  GroupKeys           GroupKey[]

  @@map("users")
}

model DirectMessage {
  id               String   @id
  createdAt        DateTime @default(now())
  sentByUserId     Int
  receivedByUserId Int
  iv               Bytes
  contentEncrypted Bytes
  readStatus       Boolean  @default(false)
  SentByUser       User     @relation("SentMessages", fields: [sentByUserId], references: [id], onDelete: Cascade)
  ReceivedByUser   User     @relation("ReceivedMessages", fields: [receivedByUserId], references: [id], onDelete: Cascade)

  @@map("direct_messages")
}

model Group {
  id              String     @id
  name            String
  createdByUserId Int
  createdAt       DateTime   @db.Timestamptz(3)
  iv              Bytes
  User            User       @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)
  GroupKeys       GroupKey[]

  @@map("group")
}

model GroupKey {
  id      Int    @id @default(autoincrement())
  groupId String
  userId  Int
  key     Bytes
  salt    Bytes
  User    User   @relation(fields: [userId], references: [id])
  Group   Group  @relation(fields: [groupId], references: [id])

  @@map("group_keys")
}

model GroupMember {
  groupId  String
  userId   Int
  joinetAt DateTime @default(now())

  @@unique([groupId, userId])
  @@map("group_members")
}

model GroupMessage {
  id       String   @id
  groupID  String
  senderID Int
  content  String
  sentAt   DateTime @default(now())

  @@map("group_messages")
}

model GroupMessageReadStatus {
  messageId String
  userId    Int
  readAt    DateTime @default(now())

  @@unique([messageId, userId])
  @@map("group_message_read_status")
}

model Token {
  id     String @id
  userId Int
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tokens")
}
