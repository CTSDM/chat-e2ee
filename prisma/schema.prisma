generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions", "relationJoins"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgcrypto]
}

model User {
  id                     Int                      @id @default(autoincrement())
  privateUsername        String                   @unique
  publicUsername         String                   @unique
  password               String
  publicKey              Bytes
  privateKeyEncrypted    Bytes
  salt                   Bytes
  iv                     Bytes
  SentMessages           DirectMessage[]          @relation("SentMessages")
  ReceivedMessages       DirectMessage[]          @relation("ReceivedMessages")
  Token                  Token[]
  CreatedGroups          Group[]
  GroupKeys              GroupKey[]
  GroupMember            GroupMember[]
  GroupMessage           GroupMessage[]
  GroupMessageReadStatus GroupMessageReadStatus[]

  @@map("users")
}

model DirectMessage {
  id               String   @id
  createdAt        DateTime @default(now())
  sentByUserId     Int
  receivedByUserId Int
  iv               Bytes
  contentEncrypted Bytes
  readStatus       Boolean  @default(false)
  SentByUser       User     @relation("SentMessages", fields: [sentByUserId], references: [id], onDelete: Cascade)
  ReceivedByUser   User     @relation("ReceivedMessages", fields: [receivedByUserId], references: [id], onDelete: Cascade)

  @@map("direct_messages")
}

model Group {
  id              String         @id
  name            String
  createdByUserId Int
  createdAt       DateTime       @db.Timestamptz(3)
  User            User           @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)
  GroupKeys       GroupKey[]
  GroupMember     GroupMember[]
  GroupMessage    GroupMessage[]

  @@map("groups")
}

model GroupKey {
  groupId  String
  userId   Int
  key      Bytes
  iv       Bytes
  finalKey Boolean @default(false)
  User     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  Group    Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId])
  @@map("group_keys")
}

model GroupMember {
  groupId  String
  userId   Int
  joinetAt DateTime @default(now())
  User     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Group    Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId])
  @@map("group_members")
}

model GroupMessage {
  id                     String                   @id
  groupId                String
  senderId               Int
  iv                     Bytes
  contentEncrypted       Bytes
  createdAt              DateTime                 @default(now())
  User                   User                     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  Group                  Group                    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  GroupMessageReadStatus GroupMessageReadStatus[]

  @@map("group_messages")
}

model GroupMessageReadStatus {
  messageId    String
  userId       Int
  readAt       DateTime     @default(now())
  User         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  GroupMessage GroupMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
  @@map("group_message_read_status")
}

model Token {
  id     String @id
  userId Int
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tokens")
}
